// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.bishang366.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterAssetsTransactionBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView discountFeeValue;

  @NonNull
  public final TextView feeValue;

  @NonNull
  public final TextView realFeeValue;

  @NonNull
  public final TextView tradeAmountValue;

  @NonNull
  public final TextView tradeTimeValue;

  @NonNull
  public final TextView tradeTypeValue;

  @NonNull
  public final TextView trustCountKey;

  @NonNull
  public final TextView trustPriceKey;

  @NonNull
  public final TextView trustSymbol;

  private AdapterAssetsTransactionBinding(@NonNull LinearLayout rootView,
      @NonNull TextView discountFeeValue, @NonNull TextView feeValue,
      @NonNull TextView realFeeValue, @NonNull TextView tradeAmountValue,
      @NonNull TextView tradeTimeValue, @NonNull TextView tradeTypeValue,
      @NonNull TextView trustCountKey, @NonNull TextView trustPriceKey,
      @NonNull TextView trustSymbol) {
    this.rootView = rootView;
    this.discountFeeValue = discountFeeValue;
    this.feeValue = feeValue;
    this.realFeeValue = realFeeValue;
    this.tradeAmountValue = tradeAmountValue;
    this.tradeTimeValue = tradeTimeValue;
    this.tradeTypeValue = tradeTypeValue;
    this.trustCountKey = trustCountKey;
    this.trustPriceKey = trustPriceKey;
    this.trustSymbol = trustSymbol;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterAssetsTransactionBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterAssetsTransactionBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_assets_transaction, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterAssetsTransactionBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      TextView discountFeeValue = rootView.findViewById(R.id.discount_fee_value);
      if (discountFeeValue == null) {
        missingId = "discountFeeValue";
        break missingId;
      }
      TextView feeValue = rootView.findViewById(R.id.fee_value);
      if (feeValue == null) {
        missingId = "feeValue";
        break missingId;
      }
      TextView realFeeValue = rootView.findViewById(R.id.real_fee_value);
      if (realFeeValue == null) {
        missingId = "realFeeValue";
        break missingId;
      }
      TextView tradeAmountValue = rootView.findViewById(R.id.trade_amount_value);
      if (tradeAmountValue == null) {
        missingId = "tradeAmountValue";
        break missingId;
      }
      TextView tradeTimeValue = rootView.findViewById(R.id.trade_time_value);
      if (tradeTimeValue == null) {
        missingId = "tradeTimeValue";
        break missingId;
      }
      TextView tradeTypeValue = rootView.findViewById(R.id.trade_type_value);
      if (tradeTypeValue == null) {
        missingId = "tradeTypeValue";
        break missingId;
      }
      TextView trustCountKey = rootView.findViewById(R.id.trust_count_key);
      if (trustCountKey == null) {
        missingId = "trustCountKey";
        break missingId;
      }
      TextView trustPriceKey = rootView.findViewById(R.id.trust_price_key);
      if (trustPriceKey == null) {
        missingId = "trustPriceKey";
        break missingId;
      }
      TextView trustSymbol = rootView.findViewById(R.id.trust_symbol);
      if (trustSymbol == null) {
        missingId = "trustSymbol";
        break missingId;
      }
      return new AdapterAssetsTransactionBinding((LinearLayout) rootView, discountFeeValue,
          feeValue, realFeeValue, tradeAmountValue, tradeTimeValue, tradeTypeValue, trustCountKey,
          trustPriceKey, trustSymbol);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
