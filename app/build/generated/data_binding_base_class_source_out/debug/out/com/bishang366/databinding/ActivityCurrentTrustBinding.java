// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.bishang366.R;
import com.bishang366.ui.entrust.DropdownLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.angmarch.views.NiceSpinner;

public final class ActivityCurrentTrustBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final View currentTrustUnderline;

  @NonNull
  public final DropdownLayout dropdownLayout;

  @NonNull
  public final View historyTrustUnderline;

  @NonNull
  public final ImageView ibBack;

  @NonNull
  public final ImageView ivFilter;

  @NonNull
  public final LinearLayout line2;

  @NonNull
  public final LinearLayout llTitle;

  @NonNull
  public final SwipeRefreshLayout refreshLayout;

  @NonNull
  public final RecyclerView rvAds;

  @NonNull
  public final NiceSpinner spDirection;

  @NonNull
  public final NiceSpinner spSymbol;

  @NonNull
  public final NiceSpinner spType;

  @NonNull
  public final TextView tvConfirm;

  @NonNull
  public final TextView tvEndTime;

  @NonNull
  public final TextView tvNoData;

  @NonNull
  public final TextView tvReset;

  @NonNull
  public final TextView tvStartTime;

  @NonNull
  public final TextView tvTitleCurrentTrust;

  @NonNull
  public final TextView tvTitleHistoryTrust;

  @NonNull
  public final View viewZhe;

  private ActivityCurrentTrustBinding(@NonNull RelativeLayout rootView,
      @NonNull View currentTrustUnderline, @NonNull DropdownLayout dropdownLayout,
      @NonNull View historyTrustUnderline, @NonNull ImageView ibBack, @NonNull ImageView ivFilter,
      @NonNull LinearLayout line2, @NonNull LinearLayout llTitle,
      @NonNull SwipeRefreshLayout refreshLayout, @NonNull RecyclerView rvAds,
      @NonNull NiceSpinner spDirection, @NonNull NiceSpinner spSymbol, @NonNull NiceSpinner spType,
      @NonNull TextView tvConfirm, @NonNull TextView tvEndTime, @NonNull TextView tvNoData,
      @NonNull TextView tvReset, @NonNull TextView tvStartTime,
      @NonNull TextView tvTitleCurrentTrust, @NonNull TextView tvTitleHistoryTrust,
      @NonNull View viewZhe) {
    this.rootView = rootView;
    this.currentTrustUnderline = currentTrustUnderline;
    this.dropdownLayout = dropdownLayout;
    this.historyTrustUnderline = historyTrustUnderline;
    this.ibBack = ibBack;
    this.ivFilter = ivFilter;
    this.line2 = line2;
    this.llTitle = llTitle;
    this.refreshLayout = refreshLayout;
    this.rvAds = rvAds;
    this.spDirection = spDirection;
    this.spSymbol = spSymbol;
    this.spType = spType;
    this.tvConfirm = tvConfirm;
    this.tvEndTime = tvEndTime;
    this.tvNoData = tvNoData;
    this.tvReset = tvReset;
    this.tvStartTime = tvStartTime;
    this.tvTitleCurrentTrust = tvTitleCurrentTrust;
    this.tvTitleHistoryTrust = tvTitleHistoryTrust;
    this.viewZhe = viewZhe;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityCurrentTrustBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityCurrentTrustBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_current_trust, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityCurrentTrustBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      View currentTrustUnderline = rootView.findViewById(R.id.current_trust_underline);
      if (currentTrustUnderline == null) {
        missingId = "currentTrustUnderline";
        break missingId;
      }
      DropdownLayout dropdownLayout = rootView.findViewById(R.id.dropdown_layout);
      if (dropdownLayout == null) {
        missingId = "dropdownLayout";
        break missingId;
      }
      View historyTrustUnderline = rootView.findViewById(R.id.history_trust_underline);
      if (historyTrustUnderline == null) {
        missingId = "historyTrustUnderline";
        break missingId;
      }
      ImageView ibBack = rootView.findViewById(R.id.ibBack);
      if (ibBack == null) {
        missingId = "ibBack";
        break missingId;
      }
      ImageView ivFilter = rootView.findViewById(R.id.iv_filter);
      if (ivFilter == null) {
        missingId = "ivFilter";
        break missingId;
      }
      LinearLayout line2 = rootView.findViewById(R.id.line_2);
      if (line2 == null) {
        missingId = "line2";
        break missingId;
      }
      LinearLayout llTitle = rootView.findViewById(R.id.llTitle);
      if (llTitle == null) {
        missingId = "llTitle";
        break missingId;
      }
      SwipeRefreshLayout refreshLayout = rootView.findViewById(R.id.refreshLayout);
      if (refreshLayout == null) {
        missingId = "refreshLayout";
        break missingId;
      }
      RecyclerView rvAds = rootView.findViewById(R.id.rvAds);
      if (rvAds == null) {
        missingId = "rvAds";
        break missingId;
      }
      NiceSpinner spDirection = rootView.findViewById(R.id.sp_direction);
      if (spDirection == null) {
        missingId = "spDirection";
        break missingId;
      }
      NiceSpinner spSymbol = rootView.findViewById(R.id.sp_symbol);
      if (spSymbol == null) {
        missingId = "spSymbol";
        break missingId;
      }
      NiceSpinner spType = rootView.findViewById(R.id.sp_type);
      if (spType == null) {
        missingId = "spType";
        break missingId;
      }
      TextView tvConfirm = rootView.findViewById(R.id.tv_confirm);
      if (tvConfirm == null) {
        missingId = "tvConfirm";
        break missingId;
      }
      TextView tvEndTime = rootView.findViewById(R.id.tv_end_time);
      if (tvEndTime == null) {
        missingId = "tvEndTime";
        break missingId;
      }
      TextView tvNoData = rootView.findViewById(R.id.tv_no_data);
      if (tvNoData == null) {
        missingId = "tvNoData";
        break missingId;
      }
      TextView tvReset = rootView.findViewById(R.id.tv_reset);
      if (tvReset == null) {
        missingId = "tvReset";
        break missingId;
      }
      TextView tvStartTime = rootView.findViewById(R.id.tv_start_time);
      if (tvStartTime == null) {
        missingId = "tvStartTime";
        break missingId;
      }
      TextView tvTitleCurrentTrust = rootView.findViewById(R.id.tv_title_current_trust);
      if (tvTitleCurrentTrust == null) {
        missingId = "tvTitleCurrentTrust";
        break missingId;
      }
      TextView tvTitleHistoryTrust = rootView.findViewById(R.id.tv_title_history_trust);
      if (tvTitleHistoryTrust == null) {
        missingId = "tvTitleHistoryTrust";
        break missingId;
      }
      View viewZhe = rootView.findViewById(R.id.view_zhe);
      if (viewZhe == null) {
        missingId = "viewZhe";
        break missingId;
      }
      return new ActivityCurrentTrustBinding((RelativeLayout) rootView, currentTrustUnderline,
          dropdownLayout, historyTrustUnderline, ibBack, ivFilter, line2, llTitle, refreshLayout,
          rvAds, spDirection, spSymbol, spType, tvConfirm, tvEndTime, tvNoData, tvReset,
          tvStartTime, tvTitleCurrentTrust, tvTitleHistoryTrust, viewZhe);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
