// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.bishang366.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterTrustLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView trustBack;

  @NonNull
  public final TextView trustDone;

  @NonNull
  public final TextView trustNum;

  @NonNull
  public final TextView trustOne;

  @NonNull
  public final TextView trustOnes;

  @NonNull
  public final TextView trustPrice;

  @NonNull
  public final TextView trustTime;

  @NonNull
  public final TextView trustTwo;

  @NonNull
  public final TextView trustType;

  private AdapterTrustLayoutBinding(@NonNull LinearLayout rootView, @NonNull TextView trustBack,
      @NonNull TextView trustDone, @NonNull TextView trustNum, @NonNull TextView trustOne,
      @NonNull TextView trustOnes, @NonNull TextView trustPrice, @NonNull TextView trustTime,
      @NonNull TextView trustTwo, @NonNull TextView trustType) {
    this.rootView = rootView;
    this.trustBack = trustBack;
    this.trustDone = trustDone;
    this.trustNum = trustNum;
    this.trustOne = trustOne;
    this.trustOnes = trustOnes;
    this.trustPrice = trustPrice;
    this.trustTime = trustTime;
    this.trustTwo = trustTwo;
    this.trustType = trustType;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterTrustLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterTrustLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_trust_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterTrustLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      TextView trustBack = rootView.findViewById(R.id.trust_back);
      if (trustBack == null) {
        missingId = "trustBack";
        break missingId;
      }
      TextView trustDone = rootView.findViewById(R.id.trust_done);
      if (trustDone == null) {
        missingId = "trustDone";
        break missingId;
      }
      TextView trustNum = rootView.findViewById(R.id.trust_num);
      if (trustNum == null) {
        missingId = "trustNum";
        break missingId;
      }
      TextView trustOne = rootView.findViewById(R.id.trust_one);
      if (trustOne == null) {
        missingId = "trustOne";
        break missingId;
      }
      TextView trustOnes = rootView.findViewById(R.id.trust_ones);
      if (trustOnes == null) {
        missingId = "trustOnes";
        break missingId;
      }
      TextView trustPrice = rootView.findViewById(R.id.trust_price);
      if (trustPrice == null) {
        missingId = "trustPrice";
        break missingId;
      }
      TextView trustTime = rootView.findViewById(R.id.trust_time);
      if (trustTime == null) {
        missingId = "trustTime";
        break missingId;
      }
      TextView trustTwo = rootView.findViewById(R.id.trust_two);
      if (trustTwo == null) {
        missingId = "trustTwo";
        break missingId;
      }
      TextView trustType = rootView.findViewById(R.id.trust_type);
      if (trustType == null) {
        missingId = "trustType";
        break missingId;
      }
      return new AdapterTrustLayoutBinding((LinearLayout) rootView, trustBack, trustDone, trustNum,
          trustOne, trustOnes, trustPrice, trustTime, trustTwo, trustType);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
