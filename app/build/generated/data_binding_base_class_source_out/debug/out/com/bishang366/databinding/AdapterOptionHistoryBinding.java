// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.bishang366.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterOptionHistoryBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView close;

  @NonNull
  public final TextView closseprice;

  @NonNull
  public final TextView count;

  @NonNull
  public final TextView countDown;

  @NonNull
  public final TextView countDownName;

  @NonNull
  public final TextView ctcDirection;

  @NonNull
  public final TextView ctcPrice;

  @NonNull
  public final TextView ctcTra;

  @NonNull
  public final TextView name;

  @NonNull
  public final TextView nameName;

  @NonNull
  public final TextView profitLoss;

  @NonNull
  public final TextView profitLossName;

  @NonNull
  public final TextView reparation;

  @NonNull
  public final TextView time;

  @NonNull
  public final TextView timeName;

  private AdapterOptionHistoryBinding(@NonNull LinearLayout rootView, @NonNull TextView close,
      @NonNull TextView closseprice, @NonNull TextView count, @NonNull TextView countDown,
      @NonNull TextView countDownName, @NonNull TextView ctcDirection, @NonNull TextView ctcPrice,
      @NonNull TextView ctcTra, @NonNull TextView name, @NonNull TextView nameName,
      @NonNull TextView profitLoss, @NonNull TextView profitLossName, @NonNull TextView reparation,
      @NonNull TextView time, @NonNull TextView timeName) {
    this.rootView = rootView;
    this.close = close;
    this.closseprice = closseprice;
    this.count = count;
    this.countDown = countDown;
    this.countDownName = countDownName;
    this.ctcDirection = ctcDirection;
    this.ctcPrice = ctcPrice;
    this.ctcTra = ctcTra;
    this.name = name;
    this.nameName = nameName;
    this.profitLoss = profitLoss;
    this.profitLossName = profitLossName;
    this.reparation = reparation;
    this.time = time;
    this.timeName = timeName;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterOptionHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterOptionHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_option_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterOptionHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      TextView close = rootView.findViewById(R.id.close);
      if (close == null) {
        missingId = "close";
        break missingId;
      }
      TextView closseprice = rootView.findViewById(R.id.closseprice);
      if (closseprice == null) {
        missingId = "closseprice";
        break missingId;
      }
      TextView count = rootView.findViewById(R.id.count);
      if (count == null) {
        missingId = "count";
        break missingId;
      }
      TextView countDown = rootView.findViewById(R.id.countDown);
      if (countDown == null) {
        missingId = "countDown";
        break missingId;
      }
      TextView countDownName = rootView.findViewById(R.id.countDownName);
      if (countDownName == null) {
        missingId = "countDownName";
        break missingId;
      }
      TextView ctcDirection = rootView.findViewById(R.id.ctc_direction);
      if (ctcDirection == null) {
        missingId = "ctcDirection";
        break missingId;
      }
      TextView ctcPrice = rootView.findViewById(R.id.ctc_price);
      if (ctcPrice == null) {
        missingId = "ctcPrice";
        break missingId;
      }
      TextView ctcTra = rootView.findViewById(R.id.ctc_tra);
      if (ctcTra == null) {
        missingId = "ctcTra";
        break missingId;
      }
      TextView name = rootView.findViewById(R.id.name);
      if (name == null) {
        missingId = "name";
        break missingId;
      }
      TextView nameName = rootView.findViewById(R.id.name_name);
      if (nameName == null) {
        missingId = "nameName";
        break missingId;
      }
      TextView profitLoss = rootView.findViewById(R.id.profit_loss);
      if (profitLoss == null) {
        missingId = "profitLoss";
        break missingId;
      }
      TextView profitLossName = rootView.findViewById(R.id.profit_loss_name);
      if (profitLossName == null) {
        missingId = "profitLossName";
        break missingId;
      }
      TextView reparation = rootView.findViewById(R.id.reparation);
      if (reparation == null) {
        missingId = "reparation";
        break missingId;
      }
      TextView time = rootView.findViewById(R.id.time);
      if (time == null) {
        missingId = "time";
        break missingId;
      }
      TextView timeName = rootView.findViewById(R.id.time_name);
      if (timeName == null) {
        missingId = "timeName";
        break missingId;
      }
      return new AdapterOptionHistoryBinding((LinearLayout) rootView, close, closseprice, count,
          countDown, countDownName, ctcDirection, ctcPrice, ctcTra, name, nameName, profitLoss,
          profitLossName, reparation, time, timeName);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
