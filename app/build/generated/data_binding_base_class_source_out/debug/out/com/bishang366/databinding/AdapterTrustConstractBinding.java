// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.LinearLayout;
import android.widget.TextView;
import com.bishang366.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterTrustConstractBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final LinearLayout llItem;

  @NonNull
  public final TextView trustDirection;

  @NonNull
  public final TextView trustFour;

  @NonNull
  public final TextView trustOne;

  @NonNull
  public final TextView trustPriceKey;

  @NonNull
  public final TextView trustSymbol;

  @NonNull
  public final TextView trustThree;

  @NonNull
  public final TextView trustTime;

  @NonNull
  public final TextView trustTwo;

  private AdapterTrustConstractBinding(@NonNull LinearLayout rootView, @NonNull LinearLayout llItem,
      @NonNull TextView trustDirection, @NonNull TextView trustFour, @NonNull TextView trustOne,
      @NonNull TextView trustPriceKey, @NonNull TextView trustSymbol, @NonNull TextView trustThree,
      @NonNull TextView trustTime, @NonNull TextView trustTwo) {
    this.rootView = rootView;
    this.llItem = llItem;
    this.trustDirection = trustDirection;
    this.trustFour = trustFour;
    this.trustOne = trustOne;
    this.trustPriceKey = trustPriceKey;
    this.trustSymbol = trustSymbol;
    this.trustThree = trustThree;
    this.trustTime = trustTime;
    this.trustTwo = trustTwo;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterTrustConstractBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterTrustConstractBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_trust_constract, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterTrustConstractBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      LinearLayout llItem = rootView.findViewById(R.id.ll_item);
      if (llItem == null) {
        missingId = "llItem";
        break missingId;
      }
      TextView trustDirection = rootView.findViewById(R.id.trust_direction);
      if (trustDirection == null) {
        missingId = "trustDirection";
        break missingId;
      }
      TextView trustFour = rootView.findViewById(R.id.trust_four);
      if (trustFour == null) {
        missingId = "trustFour";
        break missingId;
      }
      TextView trustOne = rootView.findViewById(R.id.trust_one);
      if (trustOne == null) {
        missingId = "trustOne";
        break missingId;
      }
      TextView trustPriceKey = rootView.findViewById(R.id.trust_price_key);
      if (trustPriceKey == null) {
        missingId = "trustPriceKey";
        break missingId;
      }
      TextView trustSymbol = rootView.findViewById(R.id.trust_symbol);
      if (trustSymbol == null) {
        missingId = "trustSymbol";
        break missingId;
      }
      TextView trustThree = rootView.findViewById(R.id.trust_three);
      if (trustThree == null) {
        missingId = "trustThree";
        break missingId;
      }
      TextView trustTime = rootView.findViewById(R.id.trust_time);
      if (trustTime == null) {
        missingId = "trustTime";
        break missingId;
      }
      TextView trustTwo = rootView.findViewById(R.id.trust_two);
      if (trustTwo == null) {
        missingId = "trustTwo";
        break missingId;
      }
      return new AdapterTrustConstractBinding((LinearLayout) rootView, llItem, trustDirection,
          trustFour, trustOne, trustPriceKey, trustSymbol, trustThree, trustTime, trustTwo);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
