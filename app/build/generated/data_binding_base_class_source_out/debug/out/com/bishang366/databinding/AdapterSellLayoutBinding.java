// Generated by view binder compiler. Do not edit!
package com.bishang366.databinding;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.viewbinding.ViewBinding;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import com.bishang366.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterSellLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final RelativeLayout ceshi;

  @NonNull
  public final TextView itemSellOne;

  @NonNull
  public final TextView itemSellThree;

  @NonNull
  public final TextView itemSellTwo;

  @NonNull
  public final TextView tvBackDepth;

  private AdapterSellLayoutBinding(@NonNull LinearLayout rootView, @NonNull RelativeLayout ceshi,
      @NonNull TextView itemSellOne, @NonNull TextView itemSellThree, @NonNull TextView itemSellTwo,
      @NonNull TextView tvBackDepth) {
    this.rootView = rootView;
    this.ceshi = ceshi;
    this.itemSellOne = itemSellOne;
    this.itemSellThree = itemSellThree;
    this.itemSellTwo = itemSellTwo;
    this.tvBackDepth = tvBackDepth;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterSellLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterSellLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_sell_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterSellLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    String missingId;
    missingId: {
      RelativeLayout ceshi = rootView.findViewById(R.id.ceshi);
      if (ceshi == null) {
        missingId = "ceshi";
        break missingId;
      }
      TextView itemSellOne = rootView.findViewById(R.id.item_sell_one);
      if (itemSellOne == null) {
        missingId = "itemSellOne";
        break missingId;
      }
      TextView itemSellThree = rootView.findViewById(R.id.item_sell_three);
      if (itemSellThree == null) {
        missingId = "itemSellThree";
        break missingId;
      }
      TextView itemSellTwo = rootView.findViewById(R.id.item_sell_two);
      if (itemSellTwo == null) {
        missingId = "itemSellTwo";
        break missingId;
      }
      TextView tvBackDepth = rootView.findViewById(R.id.tv_back_depth);
      if (tvBackDepth == null) {
        missingId = "tvBackDepth";
        break missingId;
      }
      return new AdapterSellLayoutBinding((LinearLayout) rootView, ceshi, itemSellOne,
          itemSellThree, itemSellTwo, tvBackDepth);
    }
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
